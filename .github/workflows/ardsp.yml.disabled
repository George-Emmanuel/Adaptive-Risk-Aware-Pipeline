name: AR-DSP Prototype

on:
  push:
    branches: [ "**" ]
  pull_request:

jobs:
  risk-and-security:
    runs-on: ubuntu-latest
    env:
      THREAT_LEVEL: ${{ vars.THREAT_LEVEL || 'low' }}
    permissions:
      contents: read
      security-events: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Compute risk score
        id: risk
        run: |
          python scripts/risk_score.py --base-branch ${{ github.base_ref || 'main' }} > risk.json
          echo "RISK_JSON=$(cat risk.json | tr -d '\n' | tr -d '\r')" >> $GITHUB_OUTPUT
          echo "SCORE=$(jq -r '.score' risk.json)" >> $GITHUB_OUTPUT
          echo "BAND=$(jq -r '.band' risk.json)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Show risk
        run: |
          echo "Risk score: ${{ steps.risk.outputs.SCORE }}"
          echo "Risk band : ${{ steps.risk.outputs.BAND }}"
          cat risk.json

      - name: Bandit (SAST) - always
        run: bandit -q -r app -f sarif -o bandit.sarif || true

      - name: Upload Bandit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

      - name: pip-audit (SCA) - always
        run: pip-audit -f sarif -o pipaudit.sarif || true

      - name: Upload pip-audit SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pipaudit.sarif

      - name: Build container (MEDIUM/HIGH)
        if: ${{ steps.risk.outputs.BAND != 'LOW' }}
        run: docker build -t ardsp:${{ github.sha }} .

      - name: Trivy image scan (MEDIUM/HIGH)
        if: ${{ steps.risk.outputs.BAND != 'LOW' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ardsp:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          vuln-type: 'os,library'
          severity: 'HIGH,CRITICAL'

      - name: Setup conftest
        if: ${{ steps.risk.outputs.BAND != 'LOW' }}
        run: |
          curl -L https://github.com/open-policy-agent/conftest/releases/download/v0.53.0/conftest_0.53.0_Linux_x86_64.tar.gz -o /tmp/conftest.tgz
          sudo tar -C /usr/local/bin -xzf /tmp/conftest.tgz conftest

      - name: OPA policy check (MEDIUM/HIGH)
        if: ${{ steps.risk.outputs.BAND != 'LOW' }}
        run: conftest test k8s

      - name: ZAP baseline DAST (HIGH only)
        if: ${{ steps.risk.outputs.BAND == 'HIGH' }}
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: 'http://localhost:8000/health'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
